Flask API Server - Professional Setup
Project Structure
flask-api-server/
├── app.py                 # Main application entry point
├── config.py             # Configuration management
├── requirements.txt      # Python dependencies
├── .env.example         # Environment variables template
├── .env                 # Your environment variables (create this)
├── Procfile            # Render deployment configuration
├── render.yaml         # Render service configuration
├── Dockerfile          # Docker configuration (optional)
├── .gitignore          # Git ignore rules
├── README.md           # Project documentation
├── utils/
│   ├── __init__.py
│   ├── logger.py       # Logging utilities
│   └── middleware.py   # Custom middleware
├── routes/
│   ├── __init__.py
│   ├── health.py       # Health check endpoints
│   └── api_v1.py       # Main API routes
├── logs/               # Log files (auto-created)
└── tests/              # Test files (create as needed)
    ├── __init__.py
    ├── test_health.py
    └── test_api_v1.py
Quick Start
1. Setup Local Development
bash# Clone or create your project directory
mkdir flask-api-server
cd flask-api-server

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install dependencies
pip install -r requirements.txt

# Copy environment template
cp .env.example .env
# Edit .env with your configuration

# Run the application
python app.py
2. Deploy to Render
Option A: Using render.yaml

Push your code to GitHub
Connect your GitHub repo to Render
Render will automatically use the render.yaml configuration

Option B: Manual Setup

Create a new Web Service on Render
Connect your GitHub repository
Configure:

Build Command: pip install -r requirements.txt
Start Command: gunicorn --bind 0.0.0.0:$PORT app:app --workers 2 --timeout 120
Environment: Python 3


Add environment variables:

FLASK_ENV=production
SECRET_KEY=your-secret-key
LOG_LEVEL=INFO



3. Environment Variables
Required:

SECRET_KEY - Flask secret key for sessions
FLASK_ENV - development/production
PORT - Server port (auto-set by Render)

Optional:

DEBUG - Enable debug mode (development only)
LOG_LEVEL - Logging level (DEBUG, INFO, WARNING, ERROR)
CORS_ORIGINS - Allowed CORS origins
DATABASE_URL - Database connection string
REDIS_URL - Redis connection string

API Endpoints
Health Checks

GET /health - Basic health check
GET /health/detailed - Detailed health with system metrics
GET /ready - Kubernetes readiness probe
GET /live - Kubernetes liveness probe

API v1

GET /api/v1/ - API information
POST /api/v1/echo - Echo service
GET /api/v1/users - Get users (example)
POST /api/v1/users - Create user (example)
POST /api/v1/process - Data processing service
GET /api/v1/status - API status

Features
Built-in Features

✅ Professional logging with rotation
✅ Request/response middleware
✅ Rate limiting (basic in-memory)
✅ CORS support
✅ JSON validation
✅ Error handling
✅ Health checks with system metrics
✅ Performance monitoring
✅ Request ID tracking
✅ Colored console logging (development)

Production Ready

✅ Gunicorn WSGI server
✅ Proper error handling
✅ Security headers
✅ Environment-based configuration
✅ Structured logging
✅ Health check endpoints
✅ Docker support (optional)

Adding New Services
1. Create New Blueprint
python# routes/your_service.py
from flask import Blueprint, jsonify, request
from utils.middleware import require_json, rate_limit_by_ip

your_service_bp = Blueprint('your_service', __name__)

@your_service_bp.route('/endpoint', methods=['POST'])
@require_json
@rate_limit_by_ip(max_requests=50, per_seconds=3600)
def your_endpoint():
    try:
        data = request.get_json()
        # Your logic here
        return jsonify({'status': 'success', 'data': result})
    except Exception as e:
        current_app.logger.error(f"Error: {str(e)}")
        return jsonify({'status': 'error', 'message': str(e)}), 500
2. Register Blueprint
python# In app.py
from routes.your_service import your_service_bp
app.register_blueprint(your_service_bp, url_prefix='/api/v1/your-service')
Monitoring and Maintenance
Log Files

logs/app.log - Main application logs
logs/error.log - Error logs only
logs/performance.log - Performance metrics

Health Monitoring

Use /health/detailed for comprehensive health checks
Monitor system metrics (CPU, memory, disk)
Check external service dependencies

Performance

Request duration logging
Slow request warnings (>1s)
Performance metrics in separate log file

Security Considerations

Environment Variables: Never commit .env files
Secret Key: Use strong, unique secret keys
CORS: Configure specific origins in production
Rate Limiting: Implement Redis-based rate limiting for production
Input Validation: Always validate and sanitize input
Error Messages: Don't expose internal details in error responses

Scaling
Horizontal Scaling

Add more Render instances
Use external Redis for rate limiting
Implement database connection pooling

Database Integration
python# Uncomment in requirements.txt:
# Flask-SQLAlchemy==3.1.1
# Flask-Migrate==4.0.5

# Add to config.py:
SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')
Background Tasks
python# Uncomment in requirements.txt:
# celery==5.3.4

# Add Celery configuration for async tasks
Testing
Run Tests
bash# Install test dependencies
pip install pytest pytest-flask

# Run tests
pytest tests/

# With coverage
pytest --cov=. tests/
Example Test
python# tests/test_health.py
import pytest
from app import create_app

@pytest.fixture
def client():
    app = create_app()
    app.config['TESTING'] = True
    with app.test_client() as client:
        yield client

def test_health_check(client):
    response = client.get('/health')
    assert response.status_code == 200
    assert response.json['status'] == 'healthy'
Support
For issues or questions:

Check the logs in logs/ directory
Use /health/detailed endpoint for diagnostics
Monitor system resources and performance logs

This Flask server is designed to be production-ready and easily extensible for your specific needs!